目标:
1. 现代C++编程方式实现一个多线程服务框架，屏蔽同步细节(锁相关)，基础组件充分抽象，易复用，易裁剪，易维护。
2. 高并发、高性能作为可选项(现成已经有多种网络库可选),拓展多核并行计算的能力。
3. 统一线程间通信机制作为整个框架的通信基础，使线程间通信细节对用户透明。
4. 可方便的配置ioLoop、线程池数目，便于不同业务场景下的性能测试，方案选择。


特点:
1. 线程间只通过消息队列通信，不共享对象，只有数据耦合,功能解耦
2. 任务分为普通IndependentTask(自驱,不需外界通信，运行完即销毁)和InteractiveTask(task间需要通信，而且通常常驻运行)
3. 使用eventfd作为线程间消息通知机制,可以方便的与网络IO统一处理
4. 使用池化技术（对象池）提高性能和避免内存碎片//to-do
5. 可根据生产者-消费者数目选择更高效的消息队列，比如单生产者-单消费者就可选用无锁环形队列。
6. 使用智能指针观察指针生命周期同时减少锁的粒度，同时使用哈希手段减少锁的碰撞，如ConcurrentHashMap的实现。
8. 充分利用C++11特性，面向对象和函数式编程相结合，使代码结构更加清晰合理。


改进(to-do)：
1. 边沿触发，读尽可能多的数据(设置缓冲区threshold)，区分于先读头再读body的形式。
2. 内存管理.
3. 优先级队列


