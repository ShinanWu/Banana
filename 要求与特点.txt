要求:
1. 做一个多线程服务框架，屏蔽同步细节(锁相关)，基础组件充分抽象，易复用，易裁剪，易使用，易维护。
  （易用程度向Python看齐）
2. 以线程池为基础,一个单独的accept线程，处理高并发的连接。
3. CPU数目相当的网络IO线程，充分利用CPU并且降低平均IO事件处理时间，这些线程只执行简单的不耗时的任务(IndependentTask)。
4. 可配置数目的线程池，处理耗时任务(InteractiveTask)，生成任务和任务间通信简单方便。


特点:
1. 线程池做基础,线程间只有数据通信,只有数据耦合,功能解耦
2. 任务分为普通IndependentTask(自驱,不需外界通信，运行完即销毁)和InteractiveTask(task间需要通信，而且通常常驻运行)
3. InteractiveTask之间能够方便的通信,两种Task都能随时生成其他task
4. 使用eventfd作为线程间消息通知机制,可以方便的与网络IO统一处理
5. 使用池化技术（对象池）提高性能和避免内存碎片//to-do
6. 线程间消息队列使用无锁环形队列，提高性能。
7. 使用智能指针观察指针生命周期同时减少锁的粒度(同时使用哈希手段减少锁的碰撞)，比如访问在ConcurrentHashMap的value使用智能指针，
   对指针的相关操作不需要在获得锁期间进行。
8. 充分利用C++11特性，易用程度向Python看齐。


改进：
2. 边沿触发，读尽可能多的数据(设置缓冲区threshold)，区分于先读头再读body的形式。

场景：
1. 磁盘IO避免阻塞网络IO，后台线程下载，存储，爬虫数据，多核并发计算，map-reduce
2. 后台播放控制，流控